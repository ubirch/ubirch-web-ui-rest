include "application.base.conf"

core {
  timeToWaitDevices = ${API_ENV_CORE_TTWD}
}

keycloak {
  server {
    url = ${API_ENV_KC_SERV_URL}
    realm = ${API_ENV_KC_SERV_REALM}
    username = ${API_ENV_KC_SERV_UNAME}
    password = ${API_ENV_KC_SERV_PWD}
    clientId = ${API_ENV_KC_SERV_CID}
  }
  realmName = ${API_ENV_KC_REALMNAME}
  jsonString = ${API_ENV_KC_JSON_STRING}
}

server {
  port = ${API_ENV_SERV_PORT}
  baseUrl = ${API_ENV_SERV_URL}
  scalatra {
    environment = ${API_ENV_SERV_SCALATRA_ENV}
  }
  swaggerPath = ${API_ENV_SERV_SWAGGERPATH}
}

janus {

  connector {

    hosts = ${DISC_ENV_CORE_HOSTS}
    port = ${DISC_ENV_CORE_PORT}

    connectionPool {
      reconnectInterval = ${DISC_ENV_CORE_COONPOOL_RECONINTERVAL}
      maxWaitForConnection = ${DISC_ENV_CORE_COONPOOL_MAXWAITCONNECTION}
    }

  }

}

app {
  version = ${API_ENV_APP_VERSION}
}

batch {

  separator = ${API_ENV_BATCH_LINE_SEPARATOR}

  inject {
    kafkaConsumer {
      bootstrapServers = ${API_ENV_BATCH_INJECT_KFC_NODES}
      topic = ${API_ENV_BATCH_INJECT_KFC_TOPIC}
      //If empty, a group id will be created.
      groupId = ${API_ENV_BATCH_INJECT_KFC_GROUP}
      gracefulTimeout = 2 //In Seconds
      maxPollRecords = ${API_ENV_BATCH_INJECT_KFC_MAX_POLL_RECORDS}
      fetchMaxBytesConfig = ${API_ENV_BATCH_INJECT_KFC_FETCH_MAX_BYTES_CONFIG}
      maxPartitionFetchBytesConfig = ${API_ENV_BATCH_INJECT_KFC_MAX_PARTITION_FETCH_BYTES_CONFIG}
      reconnectBackoffMsConfig = ${API_ENV_BATCH_INJECT_KFC_RECONNECT_BACKOFF_MS_CONFIG}
      reconnectBackoffMaxMsConfig = ${API_ENV_BATCH_INJECT_KFC_RECONNECT_BACKOFF_MAX_MS_CONFIG}
    }

    kafkaProducer {
      lingerMS = ${API_ENV_BATCH_INJECT_KFP_LINGER_MS}
      //Comma-separeted values of IP/Hostname and ports
      bootstrapServers = ${API_ENV_BATCH_INJECT_KFP_NODES}
      topic = ${API_ENV_BATCH_INJECT_KFP_TOPIC}
      errorTopic = ${API_ENV_BATCH_INJECT_KFC_ERROR_TOPIC}
    }
  }

  identity {
    kafkaProducer {
      lingerMS = ${API_ENV_BATCH_IDENTITY_KFP_LINGER_MS}
      //Comma-separeted values of IP/Hostname and ports
      bootstrapServers = ${API_ENV_BATCH_IDENTITY_KFP_NODES}
      topic = ${API_ENV_BATCH_IDENTITY_KFP_TOPIC}
      errorTopic = ${API_ENV_BATCH_IDENTITY_KFC_ERROR_TOPIC}

    }
  }

  identityActivation {
    kafkaProducer {
      lingerMS = ${API_ENV_BATCH_IDENTITY_ACTIVATION_KFP_LINGER_MS}
      //Comma-separeted values of IP/Hostname and ports
      bootstrapServers = ${API_ENV_BATCH_IDENTITY_ACTIVATION_KFP_NODES}
      topic = ${API_ENV_BATCH_IDENTITY_ACTIVATION_KFP_TOPIC}
      errorTopic = ${API_ENV_BATCH_IDENTITY_ACTIVATION_KFC_ERROR_TOPIC}

    }
  }

  executionContext {
    threadPoolSize =  ${API_ENV_BATCH_THREAD_POOL_SIZE}
  }


}
